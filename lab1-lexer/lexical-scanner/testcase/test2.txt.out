CLASS, class
IDENTIFIER, WhatHappen
LT_BRACE, {
PUBLIC, public
STATIC, static
VOID, void
MAIN, main
LT_PAREN, (
IDENTIFIER, String
LT_BRACK, [
RT_BRACK, ]
IDENTIFIER, args
RT_PAREN, )
LT_BRACE, {
IDENTIFIER, MyClient
IDENTIFIER, mc
SEMI, ;
INT, int
IDENTIFIER, handle
SEMI, ;
IDENTIFIER, mc
EQ, =
NEW, new
IDENTIFIER, MyClient
LT_PAREN, (
RT_PAREN, )
SEMI, ;
WHILE, while
LT_PAREN, (
EXC, !
FALSE, false
RT_PAREN, )
LT_BRACE, {
IDENTIFIER, handle
EQ, =
IDENTIFIER, mc
DOT, .
IDENTIFIER, start
LT_PAREN, (
INTEGER_LITERAL, 10
COMMA, ,
INTEGER_LITERAL, 10
RT_PAREN, )
SEMI, ;
RT_BRACE, }
RT_BRACE, }
RT_BRACE, }
CLASS, class
IDENTIFIER, Client
LT_BRACE, {
INT, int
IDENTIFIER, in
SEMI, ;
INT, int
IDENTIFIER, out
SEMI, ;
INT, int
LT_BRACK, [
RT_BRACK, ]
IDENTIFIER, messagelist
SEMI, ;
INT, int
IDENTIFIER, index
SEMI, ;
PUBLIC, public
BOOLEAN, boolean
IDENTIFIER, init
LT_PAREN, (
RT_PAREN, )
LT_BRACE, {
IDENTIFIER, index
EQ, =
INTEGER_LITERAL, 0
SEMI, ;
IDENTIFIER, messagelist
EQ, =
NEW, new
INT, int
LT_BRACK, [
INTEGER_LITERAL, 10
RT_BRACK, ]
SEMI, ;
IDENTIFIER, in
EQ, =
INTEGER_LITERAL, 0
SEMI, ;
IDENTIFIER, out
EQ, =
INTEGER_LITERAL, 0
SEMI, ;
RETURN, return
TRUE, true
SEMI, ;
RT_BRACE, }
PUBLIC, public
INT, int
IDENTIFIER, run
LT_PAREN, (
INT, int
IDENTIFIER, host
COMMA, ,
INT, int
IDENTIFIER, port
RT_PAREN, )
LT_BRACE, {
INT, int
IDENTIFIER, handle
SEMI, ;
IDENTIFIER, handle
EQ, =
THIS, this
DOT, .
IDENTIFIER, Juggling
LT_PAREN, (
RT_PAREN, )
SEMI, ;
RT_BRACE, }
PUBLIC, public
INT, int
IDENTIFIER, getMsg
LT_PAREN, (
RT_PAREN, )
LT_BRACE, {
INT, int
IDENTIFIER, tmp
SEMI, ;
IDENTIFIER, tmp
EQ, =
IDENTIFIER, messagelist
DOT, .
LENGTH, length
SEMI, ;
IF, if
LT_PAREN, (
THIS, this
DOT, .
IDENTIFIER, isVoid
LT_PAREN, (
RT_PAREN, )
RT_PAREN, )
LT_BRACE, {
IDENTIFIER, tmp
EQ, =
IDENTIFIER, tmp
NEGA, -
INTEGER_LITERAL, 1
SEMI, ;
RT_BRACE, }
ELSE, else
LT_BRACE, {
IDENTIFIER, tmp
EQ, =
IDENTIFIER, tmp
ASTER, *
INTEGER_LITERAL, 2
SEMI, ;
RT_BRACE, }
IF, if
LT_PAREN, (
IDENTIFIER, index
LT, <
INTEGER_LITERAL, 10
RT_PAREN, )
LT_BRACE, {
IDENTIFIER, messagelist
LT_BRACK, [
IDENTIFIER, index
RT_BRACK, ]
EQ, =
IDENTIFIER, tmp
SEMI, ;
IDENTIFIER, index
EQ, =
IDENTIFIER, index
POSI, +
INTEGER_LITERAL, 1
SEMI, ;
RT_BRACE, }
ELSE, else
LT_BRACE, {
IDENTIFIER, index
EQ, =
INTEGER_LITERAL, 0
SEMI, ;
RT_BRACE, }
RETURN, return
IDENTIFIER, tmp
SEMI, ;
RT_BRACE, }
PUBLIC, public
BOOLEAN, boolean
IDENTIFIER, isVoid
LT_PAREN, (
RT_PAREN, )
LT_BRACE, {
BOOLEAN, boolean
IDENTIFIER, flag
SEMI, ;
IF, if
LT_PAREN, (
IDENTIFIER, messagelist
DOT, .
LENGTH, length
INTEGER_LITERAL, 0
RT_PAREN, )
LT_BRACE, {
IDENTIFIER, flag
EQ, =
FALSE, false
SEMI, ;
RT_BRACE, }
ELSE, else
LT_BRACE, {
IDENTIFIER, flag
EQ, =
TRUE, true
SEMI, ;
RT_BRACE, }
RETURN, return
IDENTIFIER, flag
SEMI, ;
RT_BRACE, }
PUBLIC, public
INT, int
IDENTIFIER, Juggling
LT_PAREN, (
RT_PAREN, )
LT_BRACE, {
BOOLEAN, boolean
IDENTIFIER, t
SEMI, ;
INT, int
IDENTIFIER, tmp1
SEMI, ;
INT, int
IDENTIFIER, tmp2
SEMI, ;
INT, int
IDENTIFIER, tmp3
SEMI, ;
IDENTIFIER, tmp1
EQ, =
INTEGER_LITERAL, 2
SEMI, ;
IDENTIFIER, tmp2
EQ, =
INTEGER_LITERAL, 3
SEMI, ;
IDENTIFIER, tmp3
EQ, =
INTEGER_LITERAL, 4
SEMI, ;
WHILE, while
LT_PAREN, (
LT_PAREN, (
IDENTIFIER, tmp2
LT, <
IDENTIFIER, tmp3
RT_PAREN, )
AND, &&
LT_PAREN, (
IDENTIFIER, tmp1
LT, <
IDENTIFIER, tmp2
RT_PAREN, )
RT_PAREN, )
LT_BRACE, {
IDENTIFIER, tmp1
EQ, =
IDENTIFIER, tmp3
NEGA, -
IDENTIFIER, tmp2
SEMI, ;
IDENTIFIER, tmp2
EQ, =
IDENTIFIER, tmp2
NEGA, -
IDENTIFIER, tmp1
SEMI, ;
IDENTIFIER, tmp3
EQ, =
IDENTIFIER, tmp2
ASTER, *
IDENTIFIER, tmp1
SEMI, ;
IDENTIFIER, t
EQ, =
THIS, this
DOT, .
IDENTIFIER, HolyLight
LT_PAREN, (
RT_PAREN, )
SEMI, ;
RT_BRACE, }
RETURN, return
LT_PAREN, (
IDENTIFIER, tmp1
ASTER, *
IDENTIFIER, tmp2
POSI, +
IDENTIFIER, tmp3
RT_PAREN, )
ASTER, *
IDENTIFIER, messagelist
DOT, .
LENGTH, length
SEMI, ;
RT_BRACE, }
PUBLIC, public
BOOLEAN, boolean
IDENTIFIER, HolyLight
LT_PAREN, (
RT_PAREN, )
LT_BRACE, {
IDENTIFIER, in
EQ, =
IDENTIFIER, in
POSI, +
INTEGER_LITERAL, 1
SEMI, ;
INTEGER_LITERAL, 0
IDENTIFIER, out
EQ, =
IDENTIFIER, out
NEGA, -
INTEGER_LITERAL, 1
SEMI, ;
PRINTLN, System.out.println
LT_PAREN, (
FALSE, false
RT_PAREN, )
SEMI, ;
RT_BRACE, }
RT_BRACE, }
CLASS, class
IDENTIFIER, MyClient
IDENTIFIER, extend
IDENTIFIER, Client
LT_BRACE, {
PUBLIC, public
INT, int
IDENTIFIER, start
LT_PAREN, (
INT, int
IDENTIFIER, host
COMMA, ,
INT, int
IDENTIFIER, port
RT_PAREN, )
LT_BRACE, {
INT, int
IDENTIFIER, handle
SEMI, ;
IDENTIFIER, handle
EQ, =
THIS, this
DOT, .
IDENTIFIER, run
LT_PAREN, (
RT_PAREN, )
RETURN, return
IDENTIFIER, handle
SEMI, ;
RT_BRACE, }
RT_BRACE, }